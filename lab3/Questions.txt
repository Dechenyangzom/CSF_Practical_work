Questions

1.What are the advantages and disadvantages of the recursive approach compared to the iterative approach?

Recursive approach
Advantages:
>Simplicity & clarity: the recursive functions can be more intuitive and easier to read (e.g., factorial calculation, etc).
>Less Code: the recursive solutions often require fewer lines of code.
>Direct Modeling: the recursion directly models the fibonacci sequence formula F(n)= F(n-1)+F(n-2), which may be more intuitive.

Disadvantages:
>Stack overflow: Deep recursion can lead to stack overflow errors if the recursion depth exceeds the systemâ€™s stack size.
>Redundant calculations: In recursive implementations (like Fibonacci), the same values may be computed multiple times, leading to exponential time complexity.
>High Memory usage:  Recursive calls consume memory on the call stack.

Iterative approach
Advantages:
Performance: Have lower overhead and can be faster, especially for problems with a simple iterative structure.
Memory efficiency: Consume less memory as they do not require additional stack space for function calls.

Disadvantages:
>Complexity: Can be more complex and harder to understand.
>Less intuitive: the iterative approach may be less intuitive than the recursive one. 


2.How does memoization improve the performance of the recursive function? Are there any drawbacks?

Memoization is an optimization technique used in recursive functions to store the results of expensive function calls and return the cached result when the same inputs occur again.
Memoization significantly improves the performance of a recursive Fibonacci function by storing (or "memoizing") the results of previously computed values.

Drawbacks of memoization:
>Increased Space Complexity: Memoization requires additional space to store results, which can lead to higher memory usage.
>Implementation Complexity: It can complicate the implementation, especially in cases where the recursive function has multiple parameters or requires careful management of the cache.


3.In what scenarios might you prefer to use a generator function over other implementations?

>When dealing with large datasets where you want to avoid loading everything into memory.
>When you need to produce an infinite series of values (e.g., Fibonacci numbers).
>When you want to create a pipeline of operations where data is processed step-by-step.


4.How does the space complexity differ between these implementations?

Recursive Functions:
>Space Complexity: O(n) for the call stack in the worst case (where ( n ) is the depth of recursion).
>With Memoization: O(n) for the call stack plus O(n) for the memoization cache, resulting in O(n) total space complexity.

Iterative Functions:
>Space Complexity: O(1) for simple iterations (using a fixed number of variables), or O(n) if an additional data structure (like a list) is used to store results.

Generator Functions:
>Space Complexity: O(1) since they yield one value at a time and do not store the entire sequence in memory.